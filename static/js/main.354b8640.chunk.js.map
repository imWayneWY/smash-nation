{"version":3,"sources":["pages/index.js","components/loading.js","components/product.js","components/playerPage.js","pages/player.js","App.js","serviceWorker.js","index.js"],"names":["root","css","Index","href","Loading","Product","product","console","log","src","images","edges","node","originalSrc","title","priceRange","minVariantPrice","amount","GetPlayerCollection","gql","playerWrapper","products","PlayDataShow","collection","image","map","index","key","PlayerWithData","graphql","options","variables","handle","data","loading","collectionByHandle","withRouter","match","params","App","exact","path","component","Player","Boolean","window","location","hostname","httpLink","createHttpLink","uri","middlewareLink","setContext","headers","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+ZAGA,IAAMA,EAAOC,YAAH,KAiBKC,EAZD,WACZ,OACE,mBAAKD,IAAKD,GACR,iBAAGG,KAAK,0BAAR,gBACA,iBAAGA,KAAK,wBAAR,cACA,iBAAGA,KAAK,4BAAR,oBACA,iBAAGA,KAAK,+BAAR,qBACA,iBAAGA,KAAK,yBAAR,iB,yBCTSC,EAJC,kBACd,yC,8MCCF,IAAMJ,EAAOC,YAAH,KAkBKI,EAXC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEhB,OADAC,QAAQC,IAAIF,GAEV,mBAAKL,IAAKD,GACR,mBAAKC,IAAKA,YAAF,KAAoBQ,IAAKH,EAAQI,OAAOC,MAAM,GAAGC,KAAKC,cAC9D,sBAAKP,EAAQQ,OACb,mCAAeR,EAAQS,WAAWC,gBAAgBC,U,uxCCTxD,IAAMC,EAAsBC,IAAH,KAmCnBnB,EAAKC,YAAD,KAMJmB,EAAgBnB,YAAH,KAQboB,EAAWpB,YAAH,KAQRqB,EAAe,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAErB,OADAhB,QAAQC,IAAIe,GAEV,mBAAKtB,IAAKD,GACR,mBAAKC,IAAKmB,GACR,mBAAKnB,IAAKA,YAAF,KAAoBQ,IAAKc,EAAWC,MAAMX,cAClD,sBAAKU,EAAWT,QAElB,mBAAKb,IAAKoB,GAENE,EAAWF,SAASV,MAAMc,KAAI,SAACb,EAAMc,GAAP,OAAiB,YAAC,EAAD,CAASC,IAAKD,EAAOpB,QAASM,EAAKA,aAuB7EgB,EAJQC,YAAQX,EAAqB,CAClDY,QAAS,kBAAe,CAAEC,UAAW,CAAEC,OAA9B,EAAEA,WADUH,EAZJ,SAAC,GAAY,IAAXI,EAAU,EAAVA,KACnB,OACE,uBAEIA,EAAKC,QACH,YAAC,EAAD,MACA,YAAC,EAAD,CAAcX,WAAcU,EAAKE,yBC9E5BC,eANA,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACf,OACE,kBAAC,EAAD,CAAgBL,OAAQK,EAAMC,OAAON,aCS1BO,EATH,kBACV,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxC,IACjC,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,kBAAkBC,UAAWC,OCEjCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2D,2CCPAW,EAAWC,YAAe,CAAEC,IAAK,mDAEjCC,EAAiBC,aAAW,iBAAO,CACvCC,QAAS,CACP,oCAAqC,wCAInCC,EAAS,IAAIC,IAAa,CAC9BC,KAAML,EAAeM,OAAOT,GAC5BU,MAAO,IAAIC,MAIbC,IAASC,OACP,kBAAC,IAAD,CAAgBP,OAAQA,GACtB,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.354b8640.chunk.js","sourcesContent":["import React from 'react';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nconst root = css`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\nconst Index = () => {\n  return(\n    <div css={root}>\n      <a href=\"/#/player/corrine-carr\">Corrine Carr</a>\n      <a href=\"/#/player/dean-petty\">Dean Petty</a>\n      <a href=\"/#/player/jay-gizmo-hall\">Jay \"Gizmo\" Hall</a>\n      <a href=\"/#/player/daniel-de-la-rosa\">Daniel De La Rosa</a>\n      <a href=\"/#/player/tyler-loong\">Tyler Loong</a>\n    </div>\n  )\n}\n\nexport default Index;","import React from 'react';\n\nconst Loading = () => (\n  <div>loading</div>\n)\n\nexport default Loading;","import React from 'react';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst root = css`\n  width: 20vw;\n  margin: 4px;\n  text-align: center;\n`\n\n\nconst Product = ({product}) => {\n  console.log(product)\n  return (\n    <div css={root} >\n      <img css={css`width: 100%`} src={product.images.edges[0].node.originalSrc} />\n      <h6>{product.title}</h6>\n      <p>Price from {product.priceRange.minVariantPrice.amount}</p>\n    </div>\n  )\n}\n\nexport default Product;","import React from 'react';\nimport gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\nimport Loading from './loading';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Product from './product';\n\nconst GetPlayerCollection = gql`\n  query GetPlayerCollection($handle: String!) {\n    collectionByHandle(handle: $handle) {\n      title\n      descriptionHtml\n      image {\n        originalSrc\n      }\n      products(first: 100) {\n        edges{\n          node\n          {\n            title\n            onlineStoreUrl\n            images(first: 1) {\n              edges{\n                node{\n                  originalSrc\n                }\n              }\n            }\n            priceRange {\n              maxVariantPrice {\n                amount\n              }\n              minVariantPrice {\n                amount\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\nconst root=css`\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n`\n\nconst playerWrapper  =css`\n  width: 30vw;\n  height: 100%;\n  box-sizing: border-box;\n  padding: 1vw;\n  text-align: center;\n`\n\nconst products = css`\n  width: 70vw;\n  display: flex;\n  flex-wrap: wrap;\n  box-sizing: border-box;\n  padding: 1vw;\n`\n\nconst PlayDataShow = ({collection}) => {\n  console.log(collection)\n  return (\n    <div css={root}>\n      <div css={playerWrapper}>\n        <img css={css`width: 100%`} src={collection.image.originalSrc} />\n        <h2>{collection.title}</h2>\n      </div>\n      <div css={products}>\n        {\n          collection.products.edges.map((node, index) => <Product key={index} product={node.node} />)\n        }\n      </div>\n    </div>\n  )\n}\n\nconst PlayerPage = ({data}) => {\n  return(\n    <div>\n      {\n        data.loading\n        ? <Loading />\n        : <PlayDataShow collection = {data.collectionByHandle} />\n      }\n    </div>\n  )\n}\n\nconst PlayerWithData = graphql(GetPlayerCollection, {\n  options: ({handle}) => ({ variables: { handle } }),\n})(PlayerPage);\n\nexport default PlayerWithData","import React from 'react';\nimport {withRouter} from 'react-router-dom';\nimport PlayerWithData from '../components/playerPage';\n\nconst Player = ({match}) => {\n  return(\n    <PlayerWithData handle={match.params.handle} />\n  )\n}\n\nexport default withRouter(Player);","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Index from \"./pages/index\";\nimport Player from \"./pages/player\";\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route exact path='/' component={Index} />\n      <Route exact path='/player/:handle' component={Player} />\n    </Switch>\n  </Router>\n)\n\nexport default App;\n\n\n// nst TestProduct = gql`\n//   query TestProduct($id: ID!) {\n//     node(id: $id) {\n//       ... on Product {\n//         title\n//         id\n//         vendor\n//         onlineStoreUrl\n//         priceRange {\n//           maxVariantPrice {\n//             amount\n//           }\n//           minVariantPrice{\n//             amount\n//           }\n//         }\n//         descriptionHtml\n//       }\n//     }\n//   }\n// `\n\n\n// function Test({data}) {\n//   console.log(data)\n//   return (\n//     <div>\n//       {\n//         data.node\n//         ? <div dangerouslySetInnerHTML={{__html: data.node.descriptionHtml}} />\n//         : <div>Loading</div>\n//       }\n//     </div>\n//   );\n// }\n\n// const App = graphql(TestProduct, {\n//   options: {variables: {id: btoa(\"gid://shopify/Product/3499529175133\")}}\n// })(Test)\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloProvider } from 'react-apollo';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst httpLink = createHttpLink({ uri: 'https://smash-nation.myshopify.com/api/graphql' })\n\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-StoreFront-Access-Token': '97e9a751a368fabc462a242b96067909'\n  }\n}))\n\nconst client = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache: new InMemoryCache(),\n})\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}